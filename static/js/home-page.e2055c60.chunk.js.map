{"version":3,"file":"static/js/home-page.e2055c60.chunk.js","mappings":"2PAGaA,EAAOC,EAAAA,EAAAA,GAAH,gIAQJC,EAAQD,EAAAA,EAAAA,EAAH,mJAKPE,EAAAA,IAMEC,EAASH,EAAAA,EAAAA,IAAH,iEAKNI,EAAcJ,EAAAA,EAAAA,IAAH,8FAMXK,EAAcL,EAAAA,EAAAA,EAAH,sCACbM,EAAAA,IAGEC,EAAYP,EAAAA,EAAAA,EAAH,sCACXM,EAAAA,IAGEE,EAAQR,EAAAA,EAAAA,KAAH,6C,SC5BZS,EAAY,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,GAAIC,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,UAC7CC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACjB,EAAD,WACE,UAAC,KAAD,CAAMkB,GAAE,kBAAaP,GAAMQ,MAAO,CAAEC,KAAMJ,GAA1C,WACE,SAACd,EAAD,UAAQU,GAAgB,2BACxB,SAACR,EAAD,CAAQiB,IAAKR,EAAM,0CAAsCA,GAAWS,EAAUC,IAAKX,KACnF,UAACP,EAAD,YACE,UAACC,EAAD,6BACgB,SAACG,EAAD,UAAQK,QAExB,UAACN,EAAD,0BACa,UAACC,EAAD,eAASM,iBAQhCL,EAAUc,UAAY,CACpBb,GAAIc,IAAAA,OACJb,MAAOa,IAAAA,OACPZ,OAAQY,IAAAA,OACRX,YAAaW,IAAAA,OACbV,UAAWU,IAAAA,QAGb,I,EAAA,ICxCaC,EAAUzB,EAAAA,EAAAA,GAAH,gFCEd0B,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACpB,OACE,SAACF,EAAD,UACGE,EAAOC,KAAI,YAAoD,IAAjDlB,EAAgD,EAAhDA,GAAIC,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,UAC7C,OACE,SAAC,EAAD,CAEEJ,GAAIA,EACJC,MAAOA,EACPC,OAAQA,EACRC,YAAaA,EACbC,UAAWA,GALNJ,SAajBgB,EAAWH,UAAY,CACrBI,OAAQH,IAAAA,QACNA,IAAAA,MAAgB,CACdd,GAAIc,IAAAA,OACJb,MAAOa,IAAAA,OACPZ,OAAQY,IAAAA,OACRX,YAAaW,IAAAA,OACbV,UAAWU,IAAAA,UAEbK,YAGJ,S,kHCnCMC,EAAc,mCAAG,8FACT,mCACA,kDACNC,EAHe,mBACT,oCADS,SAKEC,MAAM,GAAD,OAHhB,mDAGgB,OAAUD,IALjB,cAKfE,EALe,gBAMFA,EAASC,OANP,cAMfC,EANe,yBAQdA,GARc,4CAAH,qDAWpB,I,0BC6BA,EAnCiB,WACf,OAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOT,EAAP,KAAeU,EAAf,KAsBA,OApBAC,EAAAA,EAAAA,YAAU,WACRR,IAAiBS,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACjBC,EAAY,GAElBD,EAAQZ,KAAI,YAAoE,IAAjElB,EAAgE,EAAhEA,GAAIgC,EAA4D,EAA5DA,eAAgBC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,WACtDC,EAAQ,CACZpC,GAAAA,EACAC,MAAO+B,EACP9B,OAAQ+B,EACR9B,YAAW,OAAE+B,QAAF,IAAEA,OAAF,EAAEA,EAAcG,QAAQ,GACnCjC,UAAW+B,GAGb,OAAOJ,EAAUO,KAAKF,MAGxBT,EAAUI,QAEX,IAGDd,IACE,UAACsB,EAAA,EAAD,YACE,eAAIC,MAAO,CAAEC,UAAW,SAAUC,aAAc,OAAQC,MAAO,WAA/D,6BAGA,SAAC3B,EAAA,EAAD,CAAYC,OAAQA,S","sources":["components/MovieCard/MovieCard.styled.js","components/MovieCard/MovieCard.jsx","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","API/getTrendingApi.js","pages/HomePage.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { accentTextColor, mainTextColor } from 'utilities/variables/css';\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: center;\n  margin: 10px;\n\n  width: calc((100% - 6 * 10px) / 3);\n`;\n\nexport const Title = styled.p`\n  font-size: 20px;\n  font-weight: 700;\n  text-align: center;\n\n  color: ${accentTextColor};\n\n  width: 300px;\n  margin-bottom: 15px;\n`;\n\nexport const Poster = styled.img`\n  width: 300px;\n  margin-bottom: 15px;\n`;\n\nexport const VoteWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 300px;\n`;\n\nexport const VoteAverage = styled.p`\n  color: ${mainTextColor};\n`;\n\nexport const VoteCount = styled.p`\n  color: ${mainTextColor};\n`;\n\nexport const Value = styled.span`\n  font-weight: 700;\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport propTypes from 'prop-types';\nimport posterBg from '../../utilities/images/poster.png';\nimport {\n  Item,\n  Title,\n  Poster,\n  VoteWrapper,\n  VoteAverage,\n  VoteCount,\n  Value,\n} from './MovieCard.styled';\n\nconst MovieCard = ({ id, title, poster, voteAverage, voteCount }) => {\n  const location = useLocation();\n\n  return (\n    <Item>\n      <Link to={`/movies/${id}`} state={{ from: location }}>\n        <Title>{title ? title : 'Movie without a title'}</Title>\n        <Poster src={poster ? `https://image.tmdb.org/t/p/w500/${poster}` : posterBg} alt={title} />\n        <VoteWrapper>\n          <VoteAverage>\n            Vote average: <Value>{voteAverage}</Value>\n          </VoteAverage>\n          <VoteCount>\n            Vote count:<Value> {voteCount}</Value>\n          </VoteCount>\n        </VoteWrapper>\n      </Link>\n    </Item>\n  );\n};\n\nMovieCard.prototype = {\n  id: propTypes.number,\n  title: propTypes.string,\n  poster: propTypes.string,\n  voteAverage: propTypes.number,\n  voteCount: propTypes.number,\n};\n\nexport default MovieCard;\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  margin: -10px;\n`;\n","import propTypes from 'prop-types';\nimport MovieCard from 'components/MovieCard/MovieCard';\nimport { Wrapper } from './MoviesList.styled';\n\nconst MoviesList = ({ movies }) => {\n  return (\n    <Wrapper>\n      {movies.map(({ id, title, poster, voteAverage, voteCount }) => {\n        return (\n          <MovieCard\n            key={id}\n            id={id}\n            title={title}\n            poster={poster}\n            voteAverage={voteAverage}\n            voteCount={voteCount}\n          />\n        );\n      })}\n    </Wrapper>\n  );\n};\n\nMoviesList.prototype = {\n  movies: propTypes.arrayOf(\n    propTypes.shape({\n      id: propTypes.number,\n      title: propTypes.string,\n      poster: propTypes.string,\n      voteAverage: propTypes.number,\n      voteCount: propTypes.number,\n    })\n  ).isRequired,\n};\n\nexport default MoviesList;\n","const getTrendingApi = async () => {\n  const key = '32abbe5f20cc57659aefd6abb0b04352';\n  const url = 'https://api.themoviedb.org/3/trending/movie/day';\n  const filter = `?api_key=${key}`;\n\n  const response = await fetch(`${url}${filter}`);\n  const data = await response.json();\n\n  return data;\n};\n\nexport default getTrendingApi;\n","import { useState, useEffect } from 'react';\nimport getTrendingApi from 'API/getTrendingApi';\nimport Container from 'components/Container/Container';\nimport MoviesList from 'components/MoviesList/MoviesList';\n\nconst HomePage = () => {\n  const [movies, setMovies] = useState(null);\n\n  useEffect(() => {\n    getTrendingApi().then(({ results }) => {\n      const moviesArr = [];\n\n      results.map(({ id, original_title, poster_path, vote_average, vote_count }) => {\n        const movie = {\n          id,\n          title: original_title,\n          poster: poster_path,\n          voteAverage: vote_average?.toFixed(2),\n          voteCount: vote_count,\n        };\n\n        return moviesArr.push(movie);\n      });\n\n      setMovies(moviesArr);\n    });\n  }, []);\n\n  return (\n    movies && (\n      <Container>\n        <h1 style={{ textAlign: 'center', marginBottom: '20px', color: '#c7d4ed' }}>\n          TRENDING TODAY\n        </h1>\n        <MoviesList movies={movies} />\n      </Container>\n    )\n  );\n};\n\nexport default HomePage;\n"],"names":["Item","styled","Title","accentTextColor","Poster","VoteWrapper","VoteAverage","mainTextColor","VoteCount","Value","MovieCard","id","title","poster","voteAverage","voteCount","location","useLocation","to","state","from","src","posterBg","alt","prototype","propTypes","Wrapper","MoviesList","movies","map","isRequired","getTrendingApi","filter","fetch","response","json","data","useState","setMovies","useEffect","then","results","moviesArr","original_title","poster_path","vote_average","vote_count","movie","toFixed","push","Container","style","textAlign","marginBottom","color"],"sourceRoot":""}